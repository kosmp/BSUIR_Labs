EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Lab5_for_exe.exe -- emu8086 assembler version: 4.08  
 
[ 15.11.2022  --  15:31:59 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       code SEGMENT para USE16 PUBLIC 'code'
[   2]        :                                       ASSUME CS:code, DS:data, SS:stack
[   3]    0000:                                       START:
[   4]    0000: B8 02 00                              mov ax,data
[   5]    0003: 8E D8                                 mov ds,ax
[   6]    0005: B4 09                                 mov ah,9h
[   7]    0007: BA 00 00                              mov dx,offset message
[   8]    000A: CD 21                                 int 21h
[   9]    000C: B4 02                                 mov ah,02h   ; function 02h
[  10]    000E: BA 00 01                              mov dx,0100h ; set cursor row and col in console
[  11]    0011: CD 10                                 int 10h      ; function involve
[  12]    0013: B4 09                                 mov ah,9h
[  13]    0015: BA 00 00                              mov dx,offset message
[  14]    0018: CD 21                                 int 21h
[  15]        :                                       ; To successfully exit the program we need to put 4c in ah.
[  16]        :                                       ; To return code 0 we need to put 0 in al
[  17]    001A: B8 00 4C                              mov ax,4c00h
[  18]    001D: CD 21                                 int 21h
[  19]        :                                       code ends
[  20]        :                                       
[  21]        :                                       data SEGMENT para USE16 PUBLIC 'data'
[  22]    0020: 53 74 72 69 6E 67 20 6F 66 20 73 79   message db 'String of symbols!$'
                6D 62 6F 6C 73 21 24                
[  23]        :                                       data ends
[  24]        :                                       
[  25]        :                                       stack SEGMENT para USE16 STACK 'stack'
[  26]    0040: 00 00 00 00 00 00 00 00 00 00 00 00   db 256 DUP(?)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  27]        :                                       stack ends
[  28]        :                                       
[  29]        :                                       end START
[  30]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 40      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 04      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: AD      -   check sum (l.byte)
0013: 14      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 00      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 00      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
